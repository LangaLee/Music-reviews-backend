// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  user_id         Int         @id @default(autoincrement())
  created_at      DateTime    @default(now())
  profile_pic_url String      @db.VarChar(500)
  username        String      @db.VarChar(100)
  password        String      @db.VarChar(500)
  Reviews         Reviews[]
  Comments        Comments[]
  UserLikes       UserLikes[]
}

model Genres {
  genre_id    Int       @id @default(autoincrement())
  genre_name  String    @unique
  description String
  Reviews     Reviews[]
}

model Reviews {
  review_id        Int         @id @default(autoincrement())
  created_at       DateTime    @default(now())
  review_title     String
  body             String
  review_image_url String
  author           Users       @relation(fields: [author_id], references: [user_id])
  author_id        Int
  genre            Genres      @relation(fields: [genre_id], references: [genre_id])
  genre_id         Int
  likes            Int
  dislikes         Int
  reviewComments   Comments[]
  userLikes        UserLikes[]
}

model Comments {
  comment_id Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  author     Users    @relation(fields: [author_id], references: [user_id])
  author_id  Int
  body       String
  review     Reviews  @relation(fields: [review_id], references: [review_id])
  review_id  Int
}

model UserLikes {
  like_id   Int     @id @default(autoincrement())
  user      Users   @relation(fields: [user_id], references: [user_id])
  user_id   Int
  review    Reviews @relation(fields: [review_id], references: [review_id])
  review_id Int     @unique
  value     Int
}
